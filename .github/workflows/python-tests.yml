name: Python Unit Tests

on:
  push:
    branches:
      - "develop"
  pull_request:
    types: [opened, synchronize, reopened]
  # Allows workflow to be called from other workflows
  workflow_call:
    inputs:
      ref:
        required: true
        type: string
      force-canary:
        description: |
          Forces the current build to be canary.
          Canary builds test all Python versions and do not use constraints.
        default: false
        type: boolean
      constraints-branch:
        description: "The name of the branch from which the constraints files will be downloaded or compared with."
        default: "constraints-develop"
        type: string
    secrets:
      SNOWFLAKE_ACCOUNT:
        description: "Snowflake account passed from caller workflows for snowflake integration tests"
        required: true
      SNOWFLAKE_PASSWORD:
        description: "Snowflake account password passed from caller workflows for snowflake integration tests"
        required: true

# Avoid duplicate workflows on same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-python
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  FORCE_COLOR: "1"

jobs:
  build_info:
    runs-on: ubuntu-latest

    name: "Build info"

    steps:
      - name: Checkout Streamlit code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          persist-credentials: false
          submodules: "recursive"
          fetch-depth: 2
      - name: Set Python version vars
        id: build_info
        uses: ./.github/actions/build_info
        with:
          force-canary: ${{ inputs.force-canary || false }}

    outputs:
      PYTHON_VERSIONS: ${{ steps.build_info.outputs.PYTHON_VERSIONS }}
      PYTHON_MIN_VERSION: ${{ steps.build_info.outputs.PYTHON_MIN_VERSION }}
      PYTHON_MAX_VERSION: ${{ steps.build_info.outputs.PYTHON_MAX_VERSION }}

  py-unit-tests:
    needs:
      - build_info

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python_version: "${{ fromJson(needs.build_info.outputs.PYTHON_VERSIONS) }}"

    env:
      PYTHON_VERSION: >-
        ${{
          (
            matrix.python_version == 'min' && needs.build_info.outputs.PYTHON_MIN_VERSION ||
            (matrix.python_version == 'max' && needs.build_info.outputs.PYTHON_MAX_VERSION || matrix.python_version)
          )
        }}
      CONSTRAINTS_BRANCH: ${{ inputs.constraints-branch || 'constraints-develop' }}
      COVERAGE_FILE: .coverage.${{ matrix.python_version }}

    steps:
      - name: Checkout Streamlit code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          persist-credentials: false
          submodules: "recursive"

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Setup virtual env
        uses: ./.github/actions/make_init
      - name: Run make develop
        run: |
          source venv/bin/activate
          make develop
      - name: Run Linters
        run: make pylint
        env:
          RUFF_OUTPUT_FORMAT: github
      - name: Run Type Checkers
        run: make mypy
      - name: Run Python Tests
        run: make pytest
      - name: CLI Smoke Tests
        run: make cli-smoke-tests
      - name: Set CONSTRAINTS_FILE env variable
        if: ${{ always() }}
        run: |
          mkdir -p /tmp/constraints
          echo "CONSTRAINTS_FILE=/tmp/constraints/constraints-${PYTHON_VERSION}.txt" >> $GITHUB_ENV
      - name: Generate constraint file for Python ${{ env.PYTHON_VERSION }}
        if: ${{ always() }}
        run: |
          pip freeze | grep -v "\-e git" | tee "${CONSTRAINTS_FILE}"
      - name: Diff constraint file
        if: ${{ always() }}
        run: |
          CONSTRAINT_URL="https://raw.githubusercontent.com/${GITHUB_REPOSITORY}/${CONSTRAINTS_BRANCH}/constraints-${PYTHON_VERSION}.txt"
          diff -y <(echo "Old"; curl -s "${CONSTRAINT_URL}") <(echo "New"; cat "${CONSTRAINTS_FILE}") || true
      - name: Upload constraints file
        uses: actions/upload-artifact@v4
        with:
          name: constraints-${{ matrix.python_version }}
          path: ${{ env.CONSTRAINTS_FILE }}
          if-no-files-found: error
      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        with:
          name: coverage_data_${{ matrix.python_version }}
          path: lib/${{ env.COVERAGE_FILE }}
          include-hidden-files: true
          if-no-files-found: ignore

  py-updated-constraints:
    needs:
      - py-unit-tests
    permissions:
      # Additional permission needed to upload constraints
      contents: write

    runs-on: ubuntu-latest
    if: |
      github.repository == 'streamlit/streamlit' && (
      (github.event_name == 'push' && github.ref_name == 'develop') ||
      (github.event_name == 'schedule')
      )

    name: Upload constraints

    env:
      TARGET_BRANCH: constraints-${{ github.ref_name }}

    steps:
      - name: Checkout branch "${{ env.TARGET_BRANCH }}"
        uses: actions/checkout@v4
        with:
          ref: ${{ env.TARGET_BRANCH }}
          # Save the access token to the local git config, so
          # later git commands can work.
          persist-credentials: true

      - uses: actions/download-artifact@v4
        with:
          path: .
          pattern: constraints-*
          merge-multiple: true

      - name: Commit and push constraint files
        run: |
          git add .
          git config --local user.email "core+streamlitbot-github@streamlit.io"
          git config --local user.name "Automated GitHub Actions commit"
          if ! git diff --cached --color --exit-code --ignore-matching-lines="^#.*"
          then
            git commit --all --message "Updating constraints. Github run id:${GITHUB_RUN_ID}

            This update in constraints is automatically committed by the CI based on
            '${GITHUB_REF}' in the '${GITHUB_REPOSITORY}' repository with commit sha ${GITHUB_SHA}.

            The action that build those constraints can be found at https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/
            "
            git push "origin" "HEAD:${TARGET_BRANCH}";
          else
            echo "No changes"
          fi
        env:
          TARGET_BRANCH: constraints-${{ github.ref_name }}

  py-integration-tests:
    needs:
      - build_info

    runs-on: ubuntu-latest

    # Runs triggered by PRs from forks or by dependabot won't run this job, since that PR wouldn't have secrets access
    # See: https://docs.github.com/en/code-security/dependabot/working-with-dependabot/automating-dependabot-with-github-actions
    # Runs triggered by Release/RC are workflow_dispatch events ; Nightly is a schedule event
    if: |
      github.repository == 'streamlit/streamlit' && (
      (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository && github.actor != 'dependabot[bot]') ||
      (github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch') ||
      (github.event_name == 'schedule')
      )

    env:
      CONSTRAINTS_BRANCH: ${{ inputs.constraints-branch || 'constraints-develop' }}
      COVERAGE_FILE: .coverage.integration

    steps:
      - name: Checkout Streamlit code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          persist-credentials: false
          submodules: "recursive"
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Setup virtual env
        uses: ./.github/actions/make_init
        with:
          # Deactivate usage of cached venv to avoid inferring with the Python 3.11
          # unit test job. The key generation for the cache resolves to the same key,
          # which might cause some unexpected issues with dependencies.
          use_cached_venv: false
      - name: Run make develop
        run: |
          source venv/bin/activate
          make develop
      - name: Install integration dependencies
        run: |
          source venv/bin/activate
          uv pip install -r lib/integration-requirements.txt --force-reinstall
      - name: Run Python integration tests
        run: make pytest-integration
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        with:
          name: coverage_data_integration
          path: lib/${{ env.COVERAGE_FILE }}
          include-hidden-files: true
          if-no-files-found: ignore

  py-min-deps-test:
    needs:
      - build_info

    # The min pillow version we support in Streamlit cannot be installed on
    # Ubuntu 24 -> thats why we use Ubuntu 22.04 here instead.
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false

    env:
      PYTHON_VERSION: "${{needs.build_info.outputs.PYTHON_MIN_VERSION}}"
      COVERAGE_FILE: .coverage.min_deps

    steps:
      - name: Checkout Streamlit code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          persist-credentials: false
          submodules: "recursive"
          fetch-depth: 2
      - name: Set up Python ${{ env.PYTHON_MIN_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: "${{ env.PYTHON_MIN_VERSION }}"
      - name: Setup virtual env
        uses: ./.github/actions/make_init
        with:
          use_cached_venv: false
      - name: Install min dependencies (force reinstall)
        run: |
          source venv/bin/activate
          uv pip install -r lib/min-constraints-gen.txt --force-reinstall
      - name: Generate Protobufs
        run: make protobuf
      - name: Make local modules visible
        run: |
          source venv/bin/activate
          uv pip install --editable ./lib --no-deps
      - name: Run Python Tests
        run: make pytest
      - name: CLI Smoke Tests
        run: make cli-smoke-tests
      - name: Validate min-constraints-gen
        run: |
          make gen-min-dep-constraints

          git_status=$(git status --porcelain -- lib/min-constraints-gen.txt)
          if [[ -n $git_status ]]; then
            echo "::error::The min constraints file is out of date! Please run \`make gen-min-dep-constraints\` and commit the result."
            echo "::group::git diff lib/min-constraints-gen.txt"
            git diff lib/min-constraints-gen.txt
            echo "::endgroup::"
            exit 1
          else
            echo "min constraints file is up to date."
          fi
      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        with:
          name: coverage_data_min_deps
          path: lib/${{ env.COVERAGE_FILE }}
          include-hidden-files: true
          if-no-files-found: ignore

  py-coverage-report:
    needs:
      - py-unit-tests
      - py-integration-tests
      - py-min-deps-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Streamlit code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          persist-credentials: false
          submodules: "recursive"

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Download all coverage files
        uses: actions/download-artifact@v4
        with:
          pattern: coverage_data_*
          merge-multiple: true
          path: lib

      - name: Combine coverage & generate report
        run: |
          python -m pip install --upgrade coverage[toml]

          # Combine all coverage files
          python -m coverage combine

          # Generate JSON report
          python -m coverage json -o coverage.json

          # Generate HTML report
          python -m coverage html --directory=htmlcov

          # Report and write to summary
          python -m coverage report --format=markdown >> $GITHUB_STEP_SUMMARY
        working-directory: lib

      - name: Upload combined coverage data
        uses: actions/upload-artifact@v4
        with:
          name: combined_coverage_data
          path: lib/.coverage
          include-hidden-files: true
      - name: Upload combined coverage JSON
        uses: actions/upload-artifact@v4
        with:
          name: combined_coverage_json
          path: lib/coverage.json
      - name: Upload combined coverage HTML report
        uses: actions/upload-artifact@v4
        with:
          name: combined_coverage_report
          path: lib/htmlcov
          retention-days: 14
